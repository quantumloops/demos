#include<iostream>
using namespace std;
// Structure to represent an edge 
struct Edge { 
    int src, dest, weight; 
}; 
 
// Function to implement Kruskal's MST algorithm using arrays 
void kruskalMST(int vertices, Edge* edges, int edgeCount) { 
    // Array to store the MST 
    Edge* mst = new Edge[vertices - 1]; 
    int mstIndex = 0; 
     
    // Sort edges by weight using bubble sort 
    for (int i = 0; i < edgeCount - 1; i++) { 
        for (int j = 0; j < edgeCount - i - 1; j++) { 
            if (edges[j].weight > edges[j + 1].weight) { 
                // Swap edges 
                Edge temp = edges[j]; 
                edges[j] = edges[j + 1]; 
                edges[j + 1] = temp; 
            } 
        } 
    } 
     
    // Create parent array for union-find 
    int* parent = new int[vertices]; 
     
    // Initialize parent array - each vertex is its own parent initially 
    for (int i = 0; i < vertices; i++) { 
        parent[i] = i; 
    } 
     
    // Find the parent of a vertex 
    auto find = [&parent](int vertex) -> int { 
        int root = vertex; 
        while (root != parent[root]) { 
            root = parent[root]; 
        } 
         
        // Path compression - make every examined node point directly to the root 
        int current = vertex; 
        while (current != root) { 
            int next = parent[current]; 
            parent[current] = root; 
            current = next; 
        } 
         
        return root; 
    }; 
     
    // Union operation to merge two sets 
    auto unionSets = [&parent, &find](int x, int y) { 
        int rootX = find(x); 
        int rootY = find(y); 
        parent[rootY] = rootX; 
    }; 
     
    int totalWeight = 0; 
     
    // Process edges in increasing order of weight 
    for (int i = 0; i < edgeCount; i++) { 
        int src = edges[i].src; 
        int dest = edges[i].dest; 
         
        // Check if including this edge creates a cycle 
        int srcRoot = find(src); 
        int destRoot = find(dest); 
         
        // If no cycle, include this edge in MST 
        if (srcRoot != destRoot) { 
            mst[mstIndex++] = edges[i]; 
            totalWeight += edges[i].weight; 
            unionSets(srcRoot, destRoot); 
             
            // Stop if we have enough edges for the MST 
            if (mstIndex == vertices - 1) { 
                break; 
            } 
        } 
    } 
    // Print the MST 
    std::cout << "Edges in the Minimum Spanning Tree:\n"; 
    for (int i = 0; i < vertices - 1; i++) { 
        std::cout << "Edge: " << mst[i].src << " - " << mst[i].dest  
                  << ", Weight: " << mst[i].weight << std::endl; 
    } 
    std::cout << "Total MST Weight: " << totalWeight << std::endl; 
     
    // Clean up memory 
    delete[] mst; 
    delete[] parent; 
} 
 
int main() { 
    // Example graph with 4 vertices and 5 edges 
    int vertices = 4; 
    int edgeCount = 5; 
    Edge* edges = new Edge[edgeCount]; 
    // Initialize the edges 
    edges[0] = {0, 1, 10};  // Edge from vertex 0 to 1 with weight 10 
    edges[1] = {0, 2, 6};   // Edge from vertex 0 to 2 with weight 6 
    edges[2] = {0, 3, 5};   // Edge from vertex 0 to 3 with weight 5 
    edges[3] = {1, 3, 15};  // Edge from vertex 1 to 3 with weight 15 
    edges[4] = {2, 3, 4};   // Edge from vertex 2 to 3 with weight 4 
    // Run Kruskal's algorithm 
    kruskalMST(vertices, edges, edgeCount); 
    // Clean up memory 
    delete[] edges; 
     
    return 0; 
}